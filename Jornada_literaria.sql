-- üìö PROJETO: Minha Jornada Liter√°ria
-- üìù Arquivo: consultas_minha_jornada.sql
-- üìå Descri√ß√£o: Consultas SQL para an√°lise da base de livros

USE minha_jornada;

-- =====================================================
-- 1) Quantidade de livros lidos por ano
-- =====================================================
SELECT 
    YEAR(`Inicio da leitura`) AS Ano,
    COUNT(*) AS Livros_Lidos
FROM livros
GROUP BY YEAR(`Inicio da leitura`)
ORDER BY Ano;

-- =====================================================
-- 2) Quantidade de livros por g√™nero
-- =====================================================
SELECT 
    G√™nero,
    COUNT(*) AS Livros_Lidos
FROM livros
GROUP BY G√™nero
ORDER BY Livros_Lidos DESC;

-- =====================================================
-- 3) Top 10 autores mais lidos
-- =====================================================
SELECT 
    Autor,
    COUNT(*) AS Livros_Lidos
FROM livros
GROUP BY Autor
ORDER BY Livros_Lidos DESC
LIMIT 10;

-- =====================================================
-- 4) Total de p√°ginas lidas
-- =====================================================
SELECT SUM(`N¬∫ de p√°ginas`) AS Total_Paginas
FROM livros;

-- =====================================================
-- 5) P√°ginas lidas por ano
-- =====================================================
SELECT 
    YEAR(`Inicio da leitura`) AS Ano,
    SUM(`N¬∫ de p√°ginas`) AS Total_Paginas
FROM livros
GROUP BY YEAR(`Inicio da leitura`)
ORDER BY Ano;

-- =====================================================
-- 6) M√©dia de notas por g√™nero
-- =====================================================
SELECT 
    G√™nero,
    ROUND(AVG(Nota), 2) AS Media_Nota
FROM livros
GROUP BY G√™nero
ORDER BY Media_Nota DESC;

-- =====================================================
-- 7) Ritmo m√©dio de leitura (p√°ginas por dia)
-- =====================================================
SELECT ROUND(AVG(`Pace(P√°ginas/Dias`), 2) AS Media_Paginas_Por_Dia
FROM livros;

-- =====================================================
-- 8) Efici√™ncia de leitura (p√°ginas por dia) por livro
-- =====================================================
SELECT 
    T√≠tulo, 
    ROUND(`N¬∫ de p√°ginas` / `Dias de leitura`, 2) AS Paginas_Por_Dia
FROM livros
ORDER BY Paginas_Por_Dia DESC;

-- =====================================================
-- 9) Tempo m√©dio de leitura por livro
-- =====================================================
SELECT 
    ROUND(AVG(`Dias de leitura`), 2) AS Media_Dias
FROM livros;

-- =====================================================
-- 10) M√©dia de tempo de leitura por g√™nero
-- =====================================================
SELECT 
    G√™nero, 
    ROUND(AVG(`Dias de leitura`), 2) AS Media_Dias
FROM livros
GROUP BY G√™nero
ORDER BY Media_Dias;

-- =====================================================
-- 11) M√©dia de p√°ginas por livro em cada ano
-- =====================================================
SELECT 
    YEAR(`Inicio da leitura`) AS Ano, 
    ROUND(AVG(`N¬∫ de p√°ginas`), 2) AS Media_Paginas
FROM livros
GROUP BY YEAR(`Inicio da leitura`)
ORDER BY Ano;

-- =====================================================
-- 12) Livro mais longo e mais curto
-- =====================================================
-- Livro mais longo
SELECT 
    T√≠tulo, Autor, `N¬∫ de p√°ginas`
FROM livros
ORDER BY `N¬∫ de p√°ginas` DESC
LIMIT 1;

-- Livro mais curto
SELECT 
    T√≠tulo, Autor, `N¬∫ de p√°ginas`
FROM livros
ORDER BY `N¬∫ de p√°ginas` ASC
LIMIT 1;

-- =====================================================
-- 13) Livro com maior nota por g√™nero (apenas 1 por g√™nero)
-- =====================================================
WITH ranked_max AS (
    SELECT 
        G√™nero,
        T√≠tulo,
        Nota,
        ROW_NUMBER() OVER (PARTITION BY G√™nero ORDER BY Nota DESC, T√≠tulo ASC) AS rn
    FROM livros
)
SELECT 
    G√™nero, T√≠tulo, Nota
FROM ranked_max
WHERE rn = 1;

-- =====================================================
-- 14) Livro com menor nota por g√™nero (apenas 1 por g√™nero)
-- =====================================================
WITH ranked_min AS (
    SELECT 
        G√™nero,
        T√≠tulo,
        Nota,
        ROW_NUMBER() OVER (PARTITION BY G√™nero ORDER BY Nota ASC, T√≠tulo ASC) AS rn
    FROM livros
)
SELECT 
    G√™nero, T√≠tulo, Nota
FROM ranked_min
WHERE rn = 1;
